; Basic lexical syntax; this is an "overapproximation" which does not
; distinguish between types, patterns, or expressions.

prog        = decls

decls       = [decl *(";" decl) [";"]]
decls      =/ "(" decls ")"

decl        = let-decl / fun-decl

let-decl    = "let" small-expr ["=" expr]
fun-decl    = "fun" base-expr ["|" small-expr "|"] *(base-expr) [":" small-expr] ["=" expr]
; "|" small-expr "|" without instantiation inbetween


expr        = lam-expr

lam-expr    = small-expr ["=>" expr]

small-expr  = tuple-expr

tuple-expr  = anno-expr *("," anno-expr)
anno-expr   = arrow-expr [":" arrow-expr]

arrow-expr  = range-expr ["->" arrow-expr]
range-expr  = mul-expr ["upto" mul-expr]

mul-expr    = app-expr *("*" app-expr)

app-expr    = base-expr *(app-expr / "|" small-expr "|")
; "|" small-expr "|" without instantiation inbetween

base-expr   = NAME / NUM / WILDCARD
base-expr  =/ "(" expr ")"
base-expr  =/ "(" OP-NAME ")"

OP-NAME     = "->" / "upto"
OP-NAME    =/ "*"
