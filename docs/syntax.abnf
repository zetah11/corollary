; Basic lexical syntax; this is an "overapproximation" which does not
; distinguish between types, patterns, or expressions.

prog        = decls

decls       = [decl *(";" decl) [";"]]
decls      =/ "(" decls ")"

decl        = let-decl

let-decl    = "let" small-expr [":" small-expr] ["=" expr]


expr        = lam-expr

lam-expr    = anno-expr ["=>" expr]
anno-expr   = small-expr [":" small-expr]

small-expr  = tuple-expr

tuple-expr  = arrow-expr *("," arrow-expr)

arrow-expr  = range-expr ["->" arrow-expr]
range-expr  = mul-expr ["upto" mul-expr]

mul-expr    = app-expr *("*" app-expr)

app-expr    = base-expr [app-expr]

base-expr   = NAME / NUM / WILDCARD
base-expr  =/ "(" expr ")"
base-expr  =/ "(" OP-NAME ")"

OP-NAME     = "->" / "upto"
OP-NAME    =/ "*"
